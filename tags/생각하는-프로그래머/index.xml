<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>생각하는 프로그래머 on The Computer Programmer, Nolleh</title>
    <link>https://nolleh.github.io/tags/%EC%83%9D%EA%B0%81%ED%95%98%EB%8A%94-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8/</link>
    <description>Recent content in 생각하는 프로그래머 on The Computer Programmer, Nolleh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <lastBuildDate>Wed, 29 Jun 2022 22:15:08 +0900</lastBuildDate><atom:link href="https://nolleh.github.io/tags/%EC%83%9D%EA%B0%81%ED%95%98%EB%8A%94-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2.level of Abstraction</title>
      <link>https://nolleh.github.io/distributed-systems/2.level-of-abstraction/</link>
      <pubDate>Wed, 29 Jun 2022 22:15:08 +0900</pubDate>
      
      <guid>https://nolleh.github.io/distributed-systems/2.level-of-abstraction/</guid>
      <description>다음에서 발췌 http://book.mixu.net/distsys/abstractions.html
 2. Up and down the level of abstraction 이 챕터에서는, 추상화의 레벨을 여행할 것이며, 몇가지 불가능한 결과를 보고, (CAP 와 FLP), 그리고 나서 성능에 대한 항해를 할 것 입니다.
만약 어떤 프로그래밍을 완료했다면, 추상화. 수준에 대한 개념은 당신에게 익숙할 겁니다. 당신은 이미 추상화와 함께 했고, 어떤 API 를 통해 더 낮은 레이어와 인터페이싱하고 있을 것이며, 더 높은 레이어에 API 나 인터페이스를 제공하고있을 겁니다. OSI 네트워크 7 계층이 좋은 예죠.</description>
    </item>
    
    <item>
      <title>1. Distributed systems at a highlevel</title>
      <link>https://nolleh.github.io/distributed-systems/1.highlevel/</link>
      <pubDate>Mon, 21 Jan 2019 22:58:23 +0900</pubDate>
      
      <guid>https://nolleh.github.io/distributed-systems/1.highlevel/</guid>
      <description>다음에서 발췌 http://book.mixu.net/distsys/intro.html
 1. Distributed systems at a highlevel  분산 프로그래밍은 같은 문제를 하나의 컴퓨터에서 해결할 수 있는 문제를 여러 컴퓨터에서 해결하는 예술이다.  컴퓨터 시스템이라면 해결해야 하는 두개의 문제가 있습니다.
 저장소 연산  분산 프로그래밍은 하나의 컴퓨터에서 해결할 수 있는 문제를 여러 컴퓨터를 통해 해결하는 예술입니다. 보통 하나의 컴퓨터에서 해결하기에는 적합하지 않은 문제를 위해서입니다.
실세계에서의 어떤것도 분산시스템을 요구하지는 않습니다. 무한한 돈과 무한한 실시간 연구 시간이 있다면, 분산시스템은 필요없습니다.</description>
    </item>
    
    <item>
      <title>Unix 01 Intro</title>
      <link>https://nolleh.github.io/network/unix-01-intro/</link>
      <pubDate>Tue, 01 Aug 2017 22:54:19 +0900</pubDate>
      
      <guid>https://nolleh.github.io/network/unix-01-intro/</guid>
      <description>네트워킹의 바이블이라 할 수 있는 Unix Network Programming 의 내용 정리
 Books Introduction Socket 을 통해 통신하는 프로그램을 작성하는 개발자를 위해 쓰여진 책.
시작하는 사람에게나, 프로페셔널에게나 유용한 책.
물론 유지보수를 하거나, 새로 작성하는 사람, 네트워크 시스템 함수를 이해하는 모두에게 유용하다.
실제 텍스트들은 유닉스 시스템에서 구동가능하나, OS 에 독립적인 socket api 를 지원하는 다른 OS 에서도, 본문에서 제안하는 일반적인 개념을 활용가능하다.
많은 OS 는 셀수 없이 많은 네트워크 응용프로그램을 제공하고 있으며 - 예컨데 웹브라우저, email.</description>
    </item>
    
    <item>
      <title>Concurrent Idiom 1 - Stack</title>
      <link>https://nolleh.github.io/concurrency/concurrent-idiom-1-stack/</link>
      <pubDate>Mon, 10 Jul 2017 22:57:57 +0900</pubDate>
      
      <guid>https://nolleh.github.io/concurrency/concurrent-idiom-1-stack/</guid>
      <description>concurrent 프로그램을 작성할 때 고려해야할 몇가지 사항. 그리고 idiom.
여러 서적에서 발췌하였으며, 정리 차원에서 작성한 내용이므로 본 글을 처음 접한 사람이 이해하기에 많은 내용을 담지 않을 수 있음.
어쩌면 작성자의 부사수를 위한 자재가 될지도 모르겠&amp;hellip;(..)
 Concurrent ISSUE - Stack 이번엔 스택.
if (!s.empty()) {  item = s.top();  s.pop(); } 인터페이스상의 문제이기 때문에 empty 와 top 사이의 safety 를 보장할 수 없다.
top() / pop() 도 마찬가지 -&amp;raquo; 조회되지 못하는 아이템이 있을 수 있다.</description>
    </item>
    
  </channel>
</rss>
